Index: AI/abstract_tree_seach.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from abc import ABC, abstractmethod\nfrom math import sqrt, log\nimport random\n\nfrom fog_of_war.fog_of_war_chess import FOWChess\nfrom node import Node\n\n\nclass AbstractTreeSearch(ABC):\n\n    @abstractmethod\n    def is_terminal_state(self, state:FOWChess, depth:int)-> bool: pass\n\n    @abstractmethod\n    def terminal_state_value(self, state:FOWChess, depth:int) -> int: pass\n\n    @abstractmethod\n    def update_node_score(self, node:Node, result:int) -> None: pass\n\n    def populate_node(self, node:Node):\n        node.populate()\n\n    def ucb(self, node:Node, c_const:float=1.41,) -> Node:\n        \"\"\"\n        Find child in children list with the greatest upper confidence bound.\n        UCB given by UCB(v,vi) = Q(vi)/N(vi) + c*[ln(N(v))/N(vi)]^1/2\n        Where v is current node, vi is child,\n        c is an exploitation constant,\n        Q() gives score of a node,\n        N() gives visits to a node,\n        \"\"\"\n        ucb_values = [_child.score / _child.visits + c_const * sqrt( log(node.visits) / _child.visits)\n                      for _child in node.children]\n        return node.children[ucb_values.index(max(ucb_values))]\n\n    def best_child(self, node: Node) -> Node:\n        if node._unvisited_list:\n            return node._unvisited_list.pop(random.randint(0, len(node._unvisited_list)))\n        else:\n            return self.ucb(node)\n\n    def rollout(self, node:Node, depth:int)-> int:\n        \"\"\"\n        Make random moves until terminal state is found.\n        Returns\n        \"\"\"\n        game:FOWChess = node.game\n        while not self.is_terminal_state(game, depth):\n            game = game.make_random_move()\n            depth+=1\n        return self.terminal_state_value(game, depth)\n\n    def mcts(self, node:Node, depth:int=0)-> int:\n        if self.is_terminal_state(node.game, depth):\n            result:int = self.terminal_state_value(node.game, depth)\n\n        elif not node.visited:\n            self.populate_node(node)\n            result:int = self.rollout(node, depth)\n\n        else:\n            result:int = self.mcts(self.best_child(node), depth+1)\n\n        self.update_node_score(node, result)\n\n        return result\n\n    @abstractmethod\n    def simulate(self, game:FOWChess, simulations:int=200)-> Node: pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AI/abstract_tree_seach.py b/AI/abstract_tree_seach.py
--- a/AI/abstract_tree_seach.py	(revision e75d9c14c087deb8b10ec58d35a0df1586fb3ab4)
+++ b/AI/abstract_tree_seach.py	(date 1648253842221)
@@ -1,4 +1,4 @@
-from abc import ABC, abstractmethod
+
 from math import sqrt, log
 import random
 
@@ -6,15 +6,13 @@
 from node import Node
 
 
-class AbstractTreeSearch(ABC):
+class TreeSearch:
+    def __init__(self): pass
 
-    @abstractmethod
     def is_terminal_state(self, state:FOWChess, depth:int)-> bool: pass
 
-    @abstractmethod
     def terminal_state_value(self, state:FOWChess, depth:int) -> int: pass
 
-    @abstractmethod
     def update_node_score(self, node:Node, result:int) -> None: pass
 
     def populate_node(self, node:Node):
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (fog_of_war)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e75d9c14c087deb8b10ec58d35a0df1586fb3ab4)
+++ b/.idea/misc.xml	(date 1648251934666)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (fog_of_war)" project-jdk-type="Python SDK" />
+  <component name="PythonCompatibilityInspectionAdvertiser">
+    <option name="version" value="3" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
--- a/.idea/inspectionProfiles/profiles_settings.xml	(revision e75d9c14c087deb8b10ec58d35a0df1586fb3ab4)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1648251992506)
@@ -1,5 +1,6 @@
 <component name="InspectionProjectProfileManager">
   <settings>
+    <option name="PROJECT_PROFILE" value="Default" />
     <option name="USE_PROJECT_PROFILE" value="false" />
     <version value="1.0" />
   </settings>
